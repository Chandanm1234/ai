{"trial_id": "0000", "hyperparameters": {"space": [{"class_name": "Int", "config": {"name": "units", "default": null, "conditions": [], "min_value": 32, "max_value": 512, "step": 32, "sampling": "linear"}}, {"class_name": "Choice", "config": {"name": "learning_rate", "default": 0.01, "conditions": [], "values": [0.01, 0.001, 0.0001], "ordered": true}}], "values": {"units": 352, "learning_rate": 0.001, "tuner/epochs": 2, "tuner/initial_epoch": 0, "tuner/bracket": 2, "tuner/round": 0}}, "metrics": {"metrics": {}}, "score": null, "best_step": 0, "status": "FAILED", "message": "Traceback (most recent call last):\n  File \"C:\\Users\\chand\\anaconda3\\envs\\test\\lib\\site-packages\\keras_tuner\\src\\engine\\base_tuner.py\", line 274, in _try_run_and_update_trial\n    self._run_and_update_trial(trial, *fit_args, **fit_kwargs)\n  File \"C:\\Users\\chand\\anaconda3\\envs\\test\\lib\\site-packages\\keras_tuner\\src\\engine\\base_tuner.py\", line 239, in _run_and_update_trial\n    results = self.run_trial(trial, *fit_args, **fit_kwargs)\n  File \"C:\\Users\\chand\\anaconda3\\envs\\test\\lib\\site-packages\\keras_tuner\\src\\tuners\\hyperband.py\", line 427, in run_trial\n    return super().run_trial(trial, *fit_args, **fit_kwargs)\n  File \"C:\\Users\\chand\\anaconda3\\envs\\test\\lib\\site-packages\\keras_tuner\\src\\engine\\tuner.py\", line 314, in run_trial\n    obj_value = self._build_and_fit_model(trial, *args, **copied_kwargs)\n  File \"C:\\Users\\chand\\anaconda3\\envs\\test\\lib\\site-packages\\keras_tuner\\src\\engine\\tuner.py\", line 233, in _build_and_fit_model\n    results = self.hypermodel.fit(hp, model, *args, **kwargs)\n  File \"C:\\Users\\chand\\anaconda3\\envs\\test\\lib\\site-packages\\keras_tuner\\src\\engine\\hypermodel.py\", line 149, in fit\n    return model.fit(*args, **kwargs)\n  File \"C:\\Users\\chand\\anaconda3\\envs\\test\\lib\\site-packages\\keras\\utils\\traceback_utils.py\", line 70, in error_handler\n    raise e.with_traceback(filtered_tb) from None\n  File \"C:\\Users\\chand\\anaconda3\\envs\\test\\lib\\site-packages\\tensorflow\\python\\eager\\execute.py\", line 54, in quick_execute\n    tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\ntensorflow.python.framework.errors_impl.InvalidArgumentError: Graph execution error:\n\nDetected at node 'categorical_crossentropy/softmax_cross_entropy_with_logits' defined at (most recent call last):\n    File \"C:\\Users\\chand\\anaconda3\\envs\\test\\lib\\threading.py\", line 973, in _bootstrap\n      self._bootstrap_inner()\n    File \"C:\\Users\\chand\\anaconda3\\envs\\test\\lib\\threading.py\", line 1016, in _bootstrap_inner\n      self.run()\n    File \"C:\\Users\\chand\\anaconda3\\envs\\test\\lib\\threading.py\", line 953, in run\n      self._target(*self._args, **self._kwargs)\n    File \"C:\\Users\\chand\\anaconda3\\envs\\test\\lib\\socketserver.py\", line 683, in process_request_thread\n      self.finish_request(request, client_address)\n    File \"C:\\Users\\chand\\anaconda3\\envs\\test\\lib\\socketserver.py\", line 360, in finish_request\n      self.RequestHandlerClass(request, client_address, self)\n    File \"C:\\Users\\chand\\anaconda3\\envs\\test\\lib\\socketserver.py\", line 747, in __init__\n      self.handle()\n    File \"C:\\Users\\chand\\anaconda3\\envs\\test\\lib\\site-packages\\werkzeug\\serving.py\", line 391, in handle\n      super().handle()\n    File \"C:\\Users\\chand\\anaconda3\\envs\\test\\lib\\http\\server.py\", line 433, in handle\n      self.handle_one_request()\n    File \"C:\\Users\\chand\\anaconda3\\envs\\test\\lib\\http\\server.py\", line 421, in handle_one_request\n      method()\n    File \"C:\\Users\\chand\\anaconda3\\envs\\test\\lib\\site-packages\\werkzeug\\serving.py\", line 363, in run_wsgi\n      execute(self.server.app)\n    File \"C:\\Users\\chand\\anaconda3\\envs\\test\\lib\\site-packages\\werkzeug\\serving.py\", line 326, in execute\n      for data in application_iter:\n    File \"C:\\Users\\chand\\anaconda3\\envs\\test\\lib\\site-packages\\werkzeug\\debug\\__init__.py\", line 341, in debug_application\n      app_iter = self.app(environ, start_response)\n    File \"C:\\Users\\chand\\anaconda3\\envs\\test\\lib\\site-packages\\flask\\app.py\", line 1498, in __call__\n      return self.wsgi_app(environ, start_response)\n    File \"C:\\Users\\chand\\anaconda3\\envs\\test\\lib\\site-packages\\flask\\app.py\", line 1473, in wsgi_app\n      response = self.full_dispatch_request()\n    File \"C:\\Users\\chand\\anaconda3\\envs\\test\\lib\\site-packages\\flask\\app.py\", line 880, in full_dispatch_request\n      rv = self.dispatch_request()\n    File \"C:\\Users\\chand\\anaconda3\\envs\\test\\lib\\site-packages\\flask\\app.py\", line 865, in dispatch_request\n      return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]\n    File \"c:\\face-recognition-CNN\\ch.py\", line 258, in train\n      train_model()\n    File \"c:\\face-recognition-CNN\\ch.py\", line 177, in train_model\n      tuner.search(train_generator, epochs=10, validation_data=validation_generator, callbacks=[early_stopping])\n    File \"C:\\Users\\chand\\anaconda3\\envs\\test\\lib\\site-packages\\keras_tuner\\src\\engine\\base_tuner.py\", line 234, in search\n      self._try_run_and_update_trial(trial, *fit_args, **fit_kwargs)\n    File \"C:\\Users\\chand\\anaconda3\\envs\\test\\lib\\site-packages\\keras_tuner\\src\\engine\\base_tuner.py\", line 274, in _try_run_and_update_trial\n      self._run_and_update_trial(trial, *fit_args, **fit_kwargs)\n    File \"C:\\Users\\chand\\anaconda3\\envs\\test\\lib\\site-packages\\keras_tuner\\src\\engine\\base_tuner.py\", line 239, in _run_and_update_trial\n      results = self.run_trial(trial, *fit_args, **fit_kwargs)\n    File \"C:\\Users\\chand\\anaconda3\\envs\\test\\lib\\site-packages\\keras_tuner\\src\\tuners\\hyperband.py\", line 427, in run_trial\n      return super().run_trial(trial, *fit_args, **fit_kwargs)\n    File \"C:\\Users\\chand\\anaconda3\\envs\\test\\lib\\site-packages\\keras_tuner\\src\\engine\\tuner.py\", line 314, in run_trial\n      obj_value = self._build_and_fit_model(trial, *args, **copied_kwargs)\n    File \"C:\\Users\\chand\\anaconda3\\envs\\test\\lib\\site-packages\\keras_tuner\\src\\engine\\tuner.py\", line 233, in _build_and_fit_model\n      results = self.hypermodel.fit(hp, model, *args, **kwargs)\n    File \"C:\\Users\\chand\\anaconda3\\envs\\test\\lib\\site-packages\\keras_tuner\\src\\engine\\hypermodel.py\", line 149, in fit\n      return model.fit(*args, **kwargs)\n    File \"C:\\Users\\chand\\anaconda3\\envs\\test\\lib\\site-packages\\keras\\utils\\traceback_utils.py\", line 65, in error_handler\n      return fn(*args, **kwargs)\n    File \"C:\\Users\\chand\\anaconda3\\envs\\test\\lib\\site-packages\\keras\\engine\\training.py\", line 1564, in fit\n      tmp_logs = self.train_function(iterator)\n    File \"C:\\Users\\chand\\anaconda3\\envs\\test\\lib\\site-packages\\keras\\engine\\training.py\", line 1160, in train_function\n      return step_function(self, iterator)\n    File \"C:\\Users\\chand\\anaconda3\\envs\\test\\lib\\site-packages\\keras\\engine\\training.py\", line 1146, in step_function\n      outputs = model.distribute_strategy.run(run_step, args=(data,))\n    File \"C:\\Users\\chand\\anaconda3\\envs\\test\\lib\\site-packages\\keras\\engine\\training.py\", line 1135, in run_step\n      outputs = model.train_step(data)\n    File \"C:\\Users\\chand\\anaconda3\\envs\\test\\lib\\site-packages\\keras\\engine\\training.py\", line 994, in train_step\n      loss = self.compute_loss(x, y, y_pred, sample_weight)\n    File \"C:\\Users\\chand\\anaconda3\\envs\\test\\lib\\site-packages\\keras\\engine\\training.py\", line 1052, in compute_loss\n      return self.compiled_loss(\n    File \"C:\\Users\\chand\\anaconda3\\envs\\test\\lib\\site-packages\\keras\\engine\\compile_utils.py\", line 265, in __call__\n      loss_value = loss_obj(y_t, y_p, sample_weight=sw)\n    File \"C:\\Users\\chand\\anaconda3\\envs\\test\\lib\\site-packages\\keras\\losses.py\", line 152, in __call__\n      losses = call_fn(y_true, y_pred)\n    File \"C:\\Users\\chand\\anaconda3\\envs\\test\\lib\\site-packages\\keras\\losses.py\", line 272, in call\n      return ag_fn(y_true, y_pred, **self._fn_kwargs)\n    File \"C:\\Users\\chand\\anaconda3\\envs\\test\\lib\\site-packages\\keras\\losses.py\", line 1990, in categorical_crossentropy\n      return backend.categorical_crossentropy(\n    File \"C:\\Users\\chand\\anaconda3\\envs\\test\\lib\\site-packages\\keras\\backend.py\", line 5535, in categorical_crossentropy\n      return tf.nn.softmax_cross_entropy_with_logits(\nNode: 'categorical_crossentropy/softmax_cross_entropy_with_logits'\nlogits and labels must be broadcastable: logits_size=[16,60] labels_size=[16,2]\n\t [[{{node categorical_crossentropy/softmax_cross_entropy_with_logits}}]] [Op:__inference_train_function_53839]\n"}